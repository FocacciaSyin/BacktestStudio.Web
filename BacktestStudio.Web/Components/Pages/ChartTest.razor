@page "/chart-test"
@using BacktestStudio.Web.Models.DTOs
@using BacktestStudio.Web.Models.ViewModels
@using BacktestStudio.Web.Components.Chart
@inject IChartService ChartService
@rendermode InteractiveServer

<PageTitle>圖表測試</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="mb-4">
                <i class="fas fa-chart-line me-2"></i>
                交易圖表測試
            </h3>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-auto">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">技術指標控制</h6>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="ma5Switch" 
                               @onchange="@((e) => ToggleIndicator(TechnicalIndicatorType.MA5, (bool)e.Value!))" />
                        <label class="form-check-label" for="ma5Switch">
                            MA5 (5日移動平均)
                        </label>
                    </div>
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="ma20Switch"
                               @onchange="@((e) => ToggleIndicator(TechnicalIndicatorType.MA20, (bool)e.Value!))" />
                        <label class="form-check-label" for="ma20Switch">
                            MA20 (20日移動平均)
                        </label>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-auto">
            <div class="card">
                <div class="card-body">
                    <h6 class="card-title">圖表操作</h6>
                    <button class="btn btn-primary btn-sm me-2" @onclick="LoadTestData">
                        <i class="fas fa-sync-alt me-1"></i>載入測試資料
                    </button>
                    <button class="btn btn-secondary btn-sm" @onclick="RefreshChart">
                        <i class="fas fa-refresh me-1"></i>重新整理
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            @if (_isLoading)
            {
                <div class="d-flex justify-content-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">載入中...</span>
                    </div>
                </div>
            }
            else if (_chartData != null)
            {
                <TradingChart ChartData="@_chartData" 
                             EnabledIndicators="@_enabledIndicators"
                             Height="500"
                             IsLoading="@_isLoading" />
            }
            else
            {
                <div class="alert alert-info text-center">
                    <i class="fas fa-info-circle me-2"></i>
                    點擊「載入測試資料」按鈕開始測試圖表功能
                </div>
            }
        </div>
    </div>

    @if (_chartData != null)
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header">
                        <h6 class="mb-0">資料統計</h6>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-3">
                                <strong>價格資料點數:</strong> @(_chartData.PriceData?.Count ?? 0)
                            </div>
                            <div class="col-md-3">
                                <strong>指標資料點數:</strong> @(_chartData.IndicatorData?.Count ?? 0)
                            </div>
                            <div class="col-md-3">
                                <strong>交易標記:</strong> @(_chartData.TradeMarkers?.Count ?? 0)
                            </div>
                            <div class="col-md-3">
                                <strong>啟用指標:</strong> @_enabledIndicators.Count
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private ChartData? _chartData;
    private List<TechnicalIndicatorType> _enabledIndicators = new();
    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // 預設啟用 MA5
        _enabledIndicators.Add(TechnicalIndicatorType.MA5);
        
        // 自動載入測試資料
        await LoadTestData();
    }

    private async Task LoadTestData()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            // 模擬 API 延遲
            await Task.Delay(500);

            // 建立測試資料
            var mockPriceData = GenerateMockPriceData();
            var mockIndicatorData = GenerateMockIndicatorData(mockPriceData);

            _chartData = new ChartData
            {
                PriceData = mockPriceData,
                IndicatorData = mockIndicatorData,
                TradeMarkers = GenerateMockTradeMarkers(mockPriceData)
            };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"載入測試資料錯誤: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void ToggleIndicator(TechnicalIndicatorType indicatorType, bool enabled)
    {
        if (enabled && !_enabledIndicators.Contains(indicatorType))
        {
            _enabledIndicators.Add(indicatorType);
        }
        else if (!enabled && _enabledIndicators.Contains(indicatorType))
        {
            _enabledIndicators.Remove(indicatorType);
        }
        
        StateHasChanged();
    }

    private async Task RefreshChart()
    {
        await LoadTestData();
    }

    private List<MarketDataPoint> GenerateMockPriceData()
    {
        var data = new List<MarketDataPoint>();
        var random = new Random();
        var basePrice = 100m;
        var startDate = DateTime.Now.AddDays(-30);

        for (int i = 0; i < 30; i++)
        {
            var date = startDate.AddDays(i);
            var open = basePrice + (decimal)(random.NextDouble() - 0.5) * 4;
            var close = open + (decimal)(random.NextDouble() - 0.5) * 6;
            var high = Math.Max(open, close) + (decimal)random.NextDouble() * 3;
            var low = Math.Min(open, close) - (decimal)random.NextDouble() * 3;

            data.Add(new MarketDataPoint
            {
                Date = date,
                Open = Math.Round(Math.Max(0.01m, open), 2),
                High = Math.Round(Math.Max(0.01m, high), 2),
                Low = Math.Round(Math.Max(0.01m, low), 2),
                Close = Math.Round(Math.Max(0.01m, close), 2),
                Volume = random.Next(50000, 200000)
            });

            basePrice = close; // 下一天的基礎價格
        }

        return data;
    }

    private List<TechnicalIndicatorData> GenerateMockIndicatorData(List<MarketDataPoint> priceData)
    {
        var indicators = new List<TechnicalIndicatorData>();

        for (int i = 0; i < priceData.Count; i++)
        {
            var item = priceData[i];
            var indicator = new TechnicalIndicatorData
            {
                Date = item.Date
            };

            // 計算 MA5
            if (i >= 4)
            {
                var ma5Sum = 0m;
                for (int j = i - 4; j <= i; j++)
                {
                    ma5Sum += priceData[j].Close;
                }
                indicator.MA5 = Math.Round(ma5Sum / 5, 2);
            }

            // 計算 MA20
            if (i >= 19)
            {
                var ma20Sum = 0m;
                for (int j = i - 19; j <= i; j++)
                {
                    ma20Sum += priceData[j].Close;
                }
                indicator.MA20 = Math.Round(ma20Sum / 20, 2);
            }

            indicators.Add(indicator);
        }

        return indicators;
    }

    private List<TradePoint> GenerateMockTradeMarkers(List<MarketDataPoint> priceData)
    {
        var trades = new List<TradePoint>();
        var random = new Random();

        // 隨機產生幾個交易點
        for (int i = 5; i < priceData.Count - 5; i += random.Next(3, 8))
        {
            var tradeType = random.Next(2) == 0 ? TradeType.Buy : TradeType.Sell;
            trades.Add(new TradePoint
            {
                Date = priceData[i].Date,
                Price = priceData[i].Close,
                TradeType = tradeType,
                Quantity = random.Next(100, 1000),
                StrategyName = tradeType == TradeType.Buy ? "買入信號" : "賣出信號"
            });
        }

        return trades;
    }
}