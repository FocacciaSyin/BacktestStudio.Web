@using Microsoft.AspNetCore.Components.Web
@rendermode InteractiveServer

<div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="display: @(IsVisible ? "block" : "none");" @onclick="OnBackdropClick" @onclick:stopPropagation="false">
    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    @if (!string.IsNullOrEmpty(IconClass))
                    {
                        <i class="@IconClass me-2"></i>
                    }
                    @Title
                </h5>
                @if (ShowCloseButton)
                {
                    <button type="button" class="btn-close" @onclick="Cancel" aria-label="關閉"></button>
                }
            </div>
            <div class="modal-body">
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p>@Message</p>
                }
                @ChildContent
            </div>
            <div class="modal-footer">
                <button type="button" class="btn @CancelButtonClass" @onclick="Cancel">
                    @CancelButtonText
                </button>
                <button type="button" class="btn @ConfirmButtonClass" @onclick="Confirm" autofocus>
                    @ConfirmButtonText
                </button>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string Title { get; set; } = "確認操作";
    [Parameter] public string Message { get; set; } = "";
    [Parameter] public string IconClass { get; set; } = "bi bi-question-circle text-warning";
    
    [Parameter] public string ConfirmButtonText { get; set; } = "確認";
    [Parameter] public string ConfirmButtonClass { get; set; } = "btn-danger";
    
    [Parameter] public string CancelButtonText { get; set; } = "取消";
    [Parameter] public string CancelButtonClass { get; set; } = "btn-secondary";
    
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    
    [Parameter] public RenderFragment? ChildContent { get; set; }
    
    private bool _isVisible = false;
    
    public bool IsVisible
    {
        get => _isVisible;
        private set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                StateHasChanged();
            }
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible)
        {
            await FocusConfirmButton();
        }
    }
    
    public void Show()
    {
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    }
    
    public void Hide()
    {
        IsVisible = false;
    }
    
    private async Task Confirm()
    {
        Hide();
        if (OnConfirm.HasDelegate)
        {
            await OnConfirm.InvokeAsync();
        }
    }
    
    private async Task Cancel()
    {
        Hide();
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
    
    private async Task OnBackdropClick()
    {
        if (CloseOnBackdropClick)
        {
            await Cancel();
        }
    }
    
    private async Task FocusConfirmButton()
    {
        // 在實際應用中可以使用 JavaScript 來聚焦按鈕
        // 這裡省略 JS interop 實作
        await Task.CompletedTask;
    }
    
    // 鍵盤事件處理 (可以通過 JavaScript 實現)
    protected override async Task OnInitializedAsync()
    {
        // 可以在這裡註冊全域鍵盤事件監聽器
        await base.OnInitializedAsync();
    }
}