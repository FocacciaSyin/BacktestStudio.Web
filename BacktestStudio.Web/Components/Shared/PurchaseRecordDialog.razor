@using BacktestStudio.Service.Dtos
@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<div class="modal fade @(IsVisible ? "show" : "")" tabindex="-1" style="display: @(IsVisible ? "block" : "none");" @onclick="OnBackdropClick" @onclick:stopPropagation="false">
    <div class="modal-dialog modal-dialog-centered" @onclick:stopPropagation="true">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="bi @IconClass me-2"></i>
                    @(IsEditMode ? "編輯買入記錄" : "新增買入記錄")
                </h5>
                <button type="button" class="btn-close" @onclick="Cancel" aria-label="關閉"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="record" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="alert alert-danger" />
                    
                    <div class="mb-3">
                        <label class="form-label">買入日期</label>
                        <InputDate @bind-Value="record.Date" class="form-control" />
                        <ValidationMessage For="@(() => record.Date)" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">價格</label>
                        <InputNumber @bind-Value="record.Price" class="form-control" step="0.01" />
                        <ValidationMessage For="@(() => record.Price)" class="text-danger" />
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">數量</label>
                        <InputNumber @bind-Value="record.Quantity" class="form-control" />
                        <ValidationMessage For="@(() => record.Quantity)" class="text-danger" />
                    </div>
                    
                    <div class="modal-footer px-0 pb-0">
                        <button type="button" class="btn btn-secondary" @onclick="Cancel">
                            <i class="bi bi-x-circle me-1"></i>
                            取消
                        </button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check-circle me-1"></i>
                            @(IsEditMode ? "儲存" : "新增")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public PurchaseRecordDto? Record { get; set; }
    [Parameter] public EventCallback<PurchaseRecordDto> OnSaved { get; set; }
    [Parameter] public EventCallback OnCancelled { get; set; }
    
    private PurchaseRecordDto record = new();
    private bool _isVisible = false;
    private bool IsEditMode => Record != null && Record.Id > 0;
    private string IconClass => IsEditMode ? "bi-pencil-square text-primary" : "bi-plus-circle text-success";
    
    public bool IsVisible
    {
        get => _isVisible;
        private set
        {
            if (_isVisible != value)
            {
                _isVisible = value;
                StateHasChanged();
            }
        }
    }
    
    protected override void OnParametersSet()
    {
        if (Record != null)
            record = new PurchaseRecordDto
            {
                Id = Record.Id,
                Date = Record.Date,
                Price = Record.Price,
                Quantity = Record.Quantity
            };
        else
            record = new PurchaseRecordDto();
    }
    
    public void ShowAddDialog()
    {
        Record = null;
        record = new PurchaseRecordDto();
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    }
    
    public void ShowEditDialog(PurchaseRecordDto recordToEdit)
    {
        Record = recordToEdit;
        record = new PurchaseRecordDto
        {
            Id = recordToEdit.Id,
            Date = recordToEdit.Date,
            Price = recordToEdit.Price,
            Quantity = recordToEdit.Quantity
        };
        IsVisible = true;
        InvokeAsync(StateHasChanged);
    }
    
    public void Hide()
    {
        IsVisible = false;
    }
    
    private async Task HandleValidSubmit()
    {
        Hide();
        if (OnSaved.HasDelegate)
        {
            await OnSaved.InvokeAsync(record);
        }
    }
    
    private async Task Cancel()
    {
        Hide();
        if (OnCancelled.HasDelegate)
        {
            await OnCancelled.InvokeAsync();
        }
    }
    
    private async Task OnBackdropClick()
    {
        await Cancel();
    }
}