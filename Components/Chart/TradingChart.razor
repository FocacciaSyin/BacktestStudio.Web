@inject IChartService ChartService
@using BacktestStudio.Web.Models.Chart

<div class="trading-chart-container">
    @if (IsLoading)
    {
        <LoadingSpinner IsVisible="true" Message="載入圖表資料中..."/>
    }
    else if (ChartData?.PriceData?.Any() == true)
    {
        <div class="chart-info mb-2">
            <small class="text-muted">
                顯示 @ChartData.PriceData.Count 個價格數據點
                @if (EnabledIndicators.Any())
                {
                    <text>, 技術指標: @string.Join(", ", EnabledIndicators)</text>
                }
            </small>
        </div>
        
        <ApexChart TItem="ChartDataPoint"
                   Options="@_chartOptions"
                   @ref="_chart"
                   Height="@Height">

            @* 價格線數據 *@
            <ApexPointSeries TItem="ChartDataPoint"
                             Items="@_chartDataPoints"
                             Name="價格"
                             SeriesType="SeriesType.Line"
                             XValue="@((item) => item.X)"
                             YValue="@((item) => item.Y)"/>

            @* 技術指標 - MA5 *@
            @if (EnabledIndicators.Contains(TechnicalIndicatorType.MA5) && _ma5DataPoints?.Any() == true)
            {
                <ApexPointSeries TItem="ChartDataPoint"
                                 Items="@_ma5DataPoints"
                                 Name="MA5"
                                 SeriesType="SeriesType.Line"
                                 XValue="@((item) => item.X)"
                                 YValue="@((item) => item.Y)"/>
            }

            @* 技術指標 - MA20 *@
            @if (EnabledIndicators.Contains(TechnicalIndicatorType.MA20) && _ma20DataPoints?.Any() == true)
            {
                <ApexPointSeries TItem="ChartDataPoint"
                                 Items="@_ma20DataPoints"
                                 Name="MA20"
                                 SeriesType="SeriesType.Line"
                                 XValue="@((item) => item.X)"
                                 YValue="@((item) => item.Y)"/>
            }
        </ApexChart>
    }
    else
    {
        <div class="text-center p-4">
            <p class="text-muted">無可用的圖表資料</p>
        </div>
    }
</div>

@code {
    [Parameter] public ChartData? ChartData { get; set; }
    [Parameter] public List<TechnicalIndicatorType> EnabledIndicators { get; set; } = new();
    [Parameter] public int Height { get; set; } = 400;
    [Parameter] public bool IsLoading { get; set; }

    private ApexChart<ChartDataPoint>? _chart;
    private ApexChartOptions<ChartDataPoint> _chartOptions = new();
    private List<ChartDataPoint> _chartDataPoints = new();
    private List<ChartDataPoint>? _ma5DataPoints;
    private List<ChartDataPoint>? _ma20DataPoints;

    protected override void OnInitialized()
    {
        SetupChartOptions();
    }

    protected override void OnParametersSet()
    {
        if (ChartData != null)
        {
            PrepareChartData();
        }
    }

    private void SetupChartOptions()
    {
        _chartOptions = new ApexChartOptions<ChartDataPoint>
        {
            Chart = new Chart
            {
                Type = ChartType.Line,
                Height = Height,
                Toolbar = new Toolbar
                {
                    Show = true,
                    Tools = new Tools
                    {
                        Download = true,
                        Selection = true,
                        Zoom = true,
                        Zoomin = true,
                        Zoomout = true,
                        Pan = true,
                        Reset = true
                    }
                },
                Zoom = new Zoom
                {
                    Enabled = true,
                    Type = AxisType.X
                }
            },
            Xaxis = new XAxis
            {
                Type = XAxisType.Datetime,
                Labels = new XAxisLabels
                {
                    Formatter = "function(value) { return new Date(value).toLocaleDateString('zh-TW'); }"
                }
            },
            Yaxis = new List<YAxis>
            {
                new YAxis
                {
                    Title = new AxisTitle { Text = "價格" },
                    Labels = new YAxisLabels
                    {
                        Formatter = "function(value) { return value?.toFixed(2); }"
                    }
                }
            },
            Theme = new Theme
            {
                Mode = Mode.Light,
                Palette = PaletteType.Palette1
            },
            Colors = new List<string> { "#008FFB", "#00E396", "#FEB019", "#FF4560", "#775DD0" },
            Stroke = new Stroke
            {
                Curve = Curve.Smooth,
                Width = new List<double> { 1, 2, 2 }
            },
            Grid = new Grid
            {
                Show = true,
                BorderColor = "#e0e0e0",
                StrokeDashArray = 3
            },
            Legend = new Legend
            {
                Show = true,
                Position = LegendPosition.Top,
                HorizontalAlign = Align.Left
            },
            Tooltip = new Tooltip
            {
                Enabled = true,
                Shared = true,
                X = new TooltipX
                {
                    Format = "yyyy/MM/dd"
                }
            }
        };
    }

    private void PrepareChartData()
    {
        if (ChartData?.PriceData != null)
        {
            // 價格線數據點(使用收盤價)
            _chartDataPoints = ChartData.PriceData.Select(item => new ChartDataPoint
            {
                X = (decimal)new DateTimeOffset(item.Date).ToUnixTimeMilliseconds(),
                Y = item.Close
            }).ToList();
        }

        if (ChartData?.IndicatorData != null)
        {
            _ma5DataPoints = ChartData.IndicatorData
                .Where(item => item.MA5.HasValue)
                .Select(item => new ChartDataPoint
                {
                    X = (decimal)new DateTimeOffset(item.Date).ToUnixTimeMilliseconds(),
                    Y = item.MA5!.Value
                }).ToList();

            _ma20DataPoints = ChartData.IndicatorData
                .Where(item => item.MA20.HasValue)
                .Select(item => new ChartDataPoint
                {
                    X = (decimal)new DateTimeOffset(item.Date).ToUnixTimeMilliseconds(),
                    Y = item.MA20!.Value
                }).ToList();
        }
    }

    public async Task RefreshChartAsync()
    {
        if (_chart != null)
        {
            await _chart.RenderAsync();
        }
    }

}

<style>
    .trading-chart-container {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .trading-chart-container .apexcharts-canvas {
        margin: 0 auto;
    }
</style>
